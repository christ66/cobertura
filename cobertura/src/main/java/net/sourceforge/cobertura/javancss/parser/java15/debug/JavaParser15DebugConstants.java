/*
 * Cobertura - http://cobertura.sourceforge.net/
 *
 * This file was taken from JavaNCSS
 * http://www.kclee.com/clemens/java/javancss/
 * Copyright (C) 2000 Chr. Clemens Lee <clemens a.t kclee d.o.t com>
 *
 * Cobertura is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * Cobertura is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Cobertura; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */

/*
 *
 * WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING  
 *
 * WARNING TO COBERTURA DEVELOPERS
 *
 * DO NOT MODIFY THIS FILE!
 *
 * MODIFY THE FILES UNDER THE JAVANCSS DIRECTORY LOCATED AT THE ROOT OF THE COBERTURA PROJECT.
 *
 * FOLLOW THE PROCEDURE FOR MERGING THE LATEST JAVANCSS INTO COBERTURA LOCATED AT
 * javancss/coberturaREADME.txt
 *
 * WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   
 */
/* Generated By:JavaCC: Do not edit this line. JavaParser15DebugConstants.java */
package net.sourceforge.cobertura.javancss.parser.java15.debug;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParser15DebugConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT = 8;
	/** RegularExpression Id. */
	int FORMAL_COMMENT = 9;
	/** RegularExpression Id. */
	int MULTI_LINE_COMMENT = 10;
	/** RegularExpression Id. */
	int ABSTRACT = 12;
	/** RegularExpression Id. */
	int ASSERT = 13;
	/** RegularExpression Id. */
	int BOOLEAN = 14;
	/** RegularExpression Id. */
	int BREAK = 15;
	/** RegularExpression Id. */
	int BYTE = 16;
	/** RegularExpression Id. */
	int CASE = 17;
	/** RegularExpression Id. */
	int CATCH = 18;
	/** RegularExpression Id. */
	int CHAR = 19;
	/** RegularExpression Id. */
	int CLASS = 20;
	/** RegularExpression Id. */
	int CONST = 21;
	/** RegularExpression Id. */
	int CONTINUE = 22;
	/** RegularExpression Id. */
	int _DEFAULT = 23;
	/** RegularExpression Id. */
	int DO = 24;
	/** RegularExpression Id. */
	int DOUBLE = 25;
	/** RegularExpression Id. */
	int ELSE = 26;
	/** RegularExpression Id. */
	int ENUM = 27;
	/** RegularExpression Id. */
	int EXTENDS = 28;
	/** RegularExpression Id. */
	int FALSE = 29;
	/** RegularExpression Id. */
	int FINAL = 30;
	/** RegularExpression Id. */
	int FINALLY = 31;
	/** RegularExpression Id. */
	int FLOAT = 32;
	/** RegularExpression Id. */
	int FOR = 33;
	/** RegularExpression Id. */
	int GOTO = 34;
	/** RegularExpression Id. */
	int IF = 35;
	/** RegularExpression Id. */
	int IMPLEMENTS = 36;
	/** RegularExpression Id. */
	int IMPORT = 37;
	/** RegularExpression Id. */
	int INSTANCEOF = 38;
	/** RegularExpression Id. */
	int INT = 39;
	/** RegularExpression Id. */
	int INTERFACE = 40;
	/** RegularExpression Id. */
	int LONG = 41;
	/** RegularExpression Id. */
	int NATIVE = 42;
	/** RegularExpression Id. */
	int NEW = 43;
	/** RegularExpression Id. */
	int NULL = 44;
	/** RegularExpression Id. */
	int PACKAGE = 45;
	/** RegularExpression Id. */
	int PRIVATE = 46;
	/** RegularExpression Id. */
	int PROTECTED = 47;
	/** RegularExpression Id. */
	int PUBLIC = 48;
	/** RegularExpression Id. */
	int RETURN = 49;
	/** RegularExpression Id. */
	int SHORT = 50;
	/** RegularExpression Id. */
	int STATIC = 51;
	/** RegularExpression Id. */
	int STRICTFP = 52;
	/** RegularExpression Id. */
	int SUPER = 53;
	/** RegularExpression Id. */
	int SWITCH = 54;
	/** RegularExpression Id. */
	int SYNCHRONIZED = 55;
	/** RegularExpression Id. */
	int THIS = 56;
	/** RegularExpression Id. */
	int THROW = 57;
	/** RegularExpression Id. */
	int THROWS = 58;
	/** RegularExpression Id. */
	int TRANSIENT = 59;
	/** RegularExpression Id. */
	int TRUE = 60;
	/** RegularExpression Id. */
	int TRY = 61;
	/** RegularExpression Id. */
	int VOID = 62;
	/** RegularExpression Id. */
	int VOLATILE = 63;
	/** RegularExpression Id. */
	int WHILE = 64;
	/** RegularExpression Id. */
	int INTEGER_LITERAL = 65;
	/** RegularExpression Id. */
	int DECIMAL_LITERAL = 66;
	/** RegularExpression Id. */
	int HEX_LITERAL = 67;
	/** RegularExpression Id. */
	int OCTAL_LITERAL = 68;
	/** RegularExpression Id. */
	int FLOATING_POINT_LITERAL = 69;
	/** RegularExpression Id. */
	int DECIMAL_FLOATING_POINT_LITERAL = 70;
	/** RegularExpression Id. */
	int DECIMAL_EXPONENT = 71;
	/** RegularExpression Id. */
	int HEXADECIMAL_FLOATING_POINT_LITERAL = 72;
	/** RegularExpression Id. */
	int HEXADECIMAL_EXPONENT = 73;
	/** RegularExpression Id. */
	int CHARACTER_LITERAL = 74;
	/** RegularExpression Id. */
	int STRING_LITERAL = 75;
	/** RegularExpression Id. */
	int IDENTIFIER = 76;
	/** RegularExpression Id. */
	int LETTER = 77;
	/** RegularExpression Id. */
	int PART_LETTER = 78;
	/** RegularExpression Id. */
	int LPAREN = 79;
	/** RegularExpression Id. */
	int RPAREN = 80;
	/** RegularExpression Id. */
	int LBRACE = 81;
	/** RegularExpression Id. */
	int RBRACE = 82;
	/** RegularExpression Id. */
	int LBRACKET = 83;
	/** RegularExpression Id. */
	int RBRACKET = 84;
	/** RegularExpression Id. */
	int SEMICOLON = 85;
	/** RegularExpression Id. */
	int COMMA = 86;
	/** RegularExpression Id. */
	int DOT = 87;
	/** RegularExpression Id. */
	int AT = 88;
	/** RegularExpression Id. */
	int ASSIGN = 89;
	/** RegularExpression Id. */
	int LT = 90;
	/** RegularExpression Id. */
	int BANG = 91;
	/** RegularExpression Id. */
	int TILDE = 92;
	/** RegularExpression Id. */
	int HOOK = 93;
	/** RegularExpression Id. */
	int COLON = 94;
	/** RegularExpression Id. */
	int EQ = 95;
	/** RegularExpression Id. */
	int LE = 96;
	/** RegularExpression Id. */
	int GE = 97;
	/** RegularExpression Id. */
	int NE = 98;
	/** RegularExpression Id. */
	int SC_OR = 99;
	/** RegularExpression Id. */
	int SC_AND = 100;
	/** RegularExpression Id. */
	int INCR = 101;
	/** RegularExpression Id. */
	int DECR = 102;
	/** RegularExpression Id. */
	int PLUS = 103;
	/** RegularExpression Id. */
	int MINUS = 104;
	/** RegularExpression Id. */
	int STAR = 105;
	/** RegularExpression Id. */
	int SLASH = 106;
	/** RegularExpression Id. */
	int BIT_AND = 107;
	/** RegularExpression Id. */
	int BIT_OR = 108;
	/** RegularExpression Id. */
	int XOR = 109;
	/** RegularExpression Id. */
	int REM = 110;
	/** RegularExpression Id. */
	int LSHIFT = 111;
	/** RegularExpression Id. */
	int PLUSASSIGN = 112;
	/** RegularExpression Id. */
	int MINUSASSIGN = 113;
	/** RegularExpression Id. */
	int STARASSIGN = 114;
	/** RegularExpression Id. */
	int SLASHASSIGN = 115;
	/** RegularExpression Id. */
	int ANDASSIGN = 116;
	/** RegularExpression Id. */
	int ORASSIGN = 117;
	/** RegularExpression Id. */
	int XORASSIGN = 118;
	/** RegularExpression Id. */
	int REMASSIGN = 119;
	/** RegularExpression Id. */
	int LSHIFTASSIGN = 120;
	/** RegularExpression Id. */
	int RSIGNEDSHIFTASSIGN = 121;
	/** RegularExpression Id. */
	int RUNSIGNEDSHIFTASSIGN = 122;
	/** RegularExpression Id. */
	int ELLIPSIS = 123;
	/** RegularExpression Id. */
	int RUNSIGNEDSHIFT = 124;
	/** RegularExpression Id. */
	int RSIGNEDSHIFT = 125;
	/** RegularExpression Id. */
	int GT = 126;
	/** RegularExpression Id. */
	int STUFF_TO_IGNORE = 128;

	/** Lexical state. */
	int DEFAULT = 0;
	/** Lexical state. */
	int IN_FORMAL_COMMENT = 1;
	/** Lexical state. */
	int IN_MULTI_LINE_COMMENT = 2;

	/** Literal token values. */
	String[] tokenImage = {"<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
			"\"\\f\"", "<token of kind 6>", "\"/*\"", "<SINGLE_LINE_COMMENT>",
			"\"*/\"", "\"*/\"", "<token of kind 11>", "\"abstract\"",
			"\"assert\"", "\"boolean\"", "\"break\"", "\"byte\"", "\"case\"",
			"\"catch\"", "\"char\"", "\"class\"", "\"const\"", "\"continue\"",
			"\"default\"", "\"do\"", "\"double\"", "\"else\"", "\"enum\"",
			"\"extends\"", "\"false\"", "\"final\"", "\"finally\"",
			"\"float\"", "\"for\"", "\"goto\"", "\"if\"", "\"implements\"",
			"\"import\"", "\"instanceof\"", "\"int\"", "\"interface\"",
			"\"long\"", "\"native\"", "\"new\"", "\"null\"", "\"package\"",
			"\"private\"", "\"protected\"", "\"public\"", "\"return\"",
			"\"short\"", "\"static\"", "\"strictfp\"", "\"super\"",
			"\"switch\"", "\"synchronized\"", "\"this\"", "\"throw\"",
			"\"throws\"", "\"transient\"", "\"true\"", "\"try\"", "\"void\"",
			"\"volatile\"", "\"while\"", "<INTEGER_LITERAL>",
			"<DECIMAL_LITERAL>", "<HEX_LITERAL>", "<OCTAL_LITERAL>",
			"<FLOATING_POINT_LITERAL>", "<DECIMAL_FLOATING_POINT_LITERAL>",
			"<DECIMAL_EXPONENT>", "<HEXADECIMAL_FLOATING_POINT_LITERAL>",
			"<HEXADECIMAL_EXPONENT>", "<CHARACTER_LITERAL>",
			"<STRING_LITERAL>", "<IDENTIFIER>", "<LETTER>", "<PART_LETTER>",
			"\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"", "\"]\"", "\";\"",
			"\",\"", "\".\"", "\"@\"", "\"=\"", "\"<\"", "\"!\"", "\"~\"",
			"\"?\"", "\":\"", "\"==\"", "\"<=\"", "\">=\"", "\"!=\"", "\"||\"",
			"\"&&\"", "\"++\"", "\"--\"", "\"+\"", "\"-\"", "\"*\"", "\"/\"",
			"\"&\"", "\"|\"", "\"^\"", "\"%\"", "\"<<\"", "\"+=\"", "\"-=\"",
			"\"*=\"", "\"/=\"", "\"&=\"", "\"|=\"", "\"^=\"", "\"%=\"",
			"\"<<=\"", "\">>=\"", "\">>>=\"", "\"...\"", "\">>>\"", "\">>\"",
			"\">\"", "\"\\u001a\"", "<STUFF_TO_IGNORE>",};

}
