/*
 * Cobertura - http://cobertura.sourceforge.net/
 *
 * This file was taken from JavaNCSS
 * http://www.kclee.com/clemens/java/javancss/
 * Copyright (C) 2000 Chr. Clemens Lee <clemens a.t kclee d.o.t com>
 *
 * Cobertura is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * by the Free Software Foundation; either version 2 of the License,
 * or (at your option) any later version.
 *
 * Cobertura is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Cobertura; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
 * USA
 */

/*
 *
 * WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING  
 *
 * WARNING TO COBERTURA DEVELOPERS
 *
 * DO NOT MODIFY THIS FILE!
 *
 * MODIFY THE FILES UNDER THE JAVANCSS DIRECTORY LOCATED AT THE ROOT OF THE COBERTURA PROJECT.
 *
 * FOLLOW THE PROCEDURE FOR MERGING THE LATEST JAVANCSS INTO COBERTURA LOCATED AT
 * javancss/coberturaREADME.txt
 *
 * WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   WARNING   
 */
/* Generated By:JavaCC: Do not edit this line. JavaParserDebugConstants.java */
//cobertura - put the import on its own line - otherwise, it messes up the script that changes the package.
package net.sourceforge.cobertura.javancss.parser.debug;

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JavaParserDebugConstants {

	/** End of File. */
	int EOF = 0;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT = 8;
	/** RegularExpression Id. */
	int SINGLE_LINE_COMMENT2 = 9;
	/** RegularExpression Id. */
	int END_OF_LINE_MULTI = 10;
	/** RegularExpression Id. */
	int MULTI_LINE_COMMENT = 11;
	/** RegularExpression Id. */
	int ABSTRACT = 13;
	/** RegularExpression Id. */
	int ASSERT = 14;
	/** RegularExpression Id. */
	int BOOLEAN = 15;
	/** RegularExpression Id. */
	int BREAK = 16;
	/** RegularExpression Id. */
	int BYTE = 17;
	/** RegularExpression Id. */
	int CASE = 18;
	/** RegularExpression Id. */
	int CATCH = 19;
	/** RegularExpression Id. */
	int CHAR = 20;
	/** RegularExpression Id. */
	int CLASS = 21;
	/** RegularExpression Id. */
	int CONST = 22;
	/** RegularExpression Id. */
	int CONTINUE = 23;
	/** RegularExpression Id. */
	int _DEFAULT = 24;
	/** RegularExpression Id. */
	int DO = 25;
	/** RegularExpression Id. */
	int DOUBLE = 26;
	/** RegularExpression Id. */
	int ELSE = 27;
	/** RegularExpression Id. */
	int ENUM = 28;
	/** RegularExpression Id. */
	int EXTENDS = 29;
	/** RegularExpression Id. */
	int FALSE = 30;
	/** RegularExpression Id. */
	int FINAL = 31;
	/** RegularExpression Id. */
	int FINALLY = 32;
	/** RegularExpression Id. */
	int FLOAT = 33;
	/** RegularExpression Id. */
	int FOR = 34;
	/** RegularExpression Id. */
	int GOTO = 35;
	/** RegularExpression Id. */
	int IF = 36;
	/** RegularExpression Id. */
	int IMPLEMENTS = 37;
	/** RegularExpression Id. */
	int IMPORT = 38;
	/** RegularExpression Id. */
	int INSTANCEOF = 39;
	/** RegularExpression Id. */
	int INT = 40;
	/** RegularExpression Id. */
	int INTERFACE = 41;
	/** RegularExpression Id. */
	int LONG = 42;
	/** RegularExpression Id. */
	int NATIVE = 43;
	/** RegularExpression Id. */
	int NEW = 44;
	/** RegularExpression Id. */
	int NULL = 45;
	/** RegularExpression Id. */
	int PACKAGE = 46;
	/** RegularExpression Id. */
	int PRIVATE = 47;
	/** RegularExpression Id. */
	int PROTECTED = 48;
	/** RegularExpression Id. */
	int PUBLIC = 49;
	/** RegularExpression Id. */
	int RETURN = 50;
	/** RegularExpression Id. */
	int SHORT = 51;
	/** RegularExpression Id. */
	int STATIC = 52;
	/** RegularExpression Id. */
	int TESTAAAA = 53;
	/** RegularExpression Id. */
	int SUPER = 54;
	/** RegularExpression Id. */
	int SWITCH = 55;
	/** RegularExpression Id. */
	int SYNCHRONIZED = 56;
	/** RegularExpression Id. */
	int THIS = 57;
	/** RegularExpression Id. */
	int THROW = 58;
	/** RegularExpression Id. */
	int THROWS = 59;
	/** RegularExpression Id. */
	int TRANSIENT = 60;
	/** RegularExpression Id. */
	int TRUE = 61;
	/** RegularExpression Id. */
	int TRY = 62;
	/** RegularExpression Id. */
	int VOID = 63;
	/** RegularExpression Id. */
	int VOLATILE = 64;
	/** RegularExpression Id. */
	int WHILE = 65;
	/** RegularExpression Id. */
	int INTEGER_LITERAL = 66;
	/** RegularExpression Id. */
	int DECIMAL_LITERAL = 67;
	/** RegularExpression Id. */
	int HEX_LITERAL = 68;
	/** RegularExpression Id. */
	int OCTAL_LITERAL = 69;
	/** RegularExpression Id. */
	int FLOATING_POINT_LITERAL = 70;
	/** RegularExpression Id. */
	int EXPONENT = 71;
	/** RegularExpression Id. */
	int CHARACTER_LITERAL = 72;
	/** RegularExpression Id. */
	int STRING_LITERAL = 73;
	/** RegularExpression Id. */
	int IDENTIFIER = 74;
	/** RegularExpression Id. */
	int LETTER = 75;
	/** RegularExpression Id. */
	int DIGIT = 76;
	/** RegularExpression Id. */
	int LPAREN = 77;
	/** RegularExpression Id. */
	int RPAREN = 78;
	/** RegularExpression Id. */
	int LBRACE = 79;
	/** RegularExpression Id. */
	int RBRACE = 80;
	/** RegularExpression Id. */
	int LBRACKET = 81;
	/** RegularExpression Id. */
	int RBRACKET = 82;
	/** RegularExpression Id. */
	int SEMICOLON = 83;
	/** RegularExpression Id. */
	int COMMA = 84;
	/** RegularExpression Id. */
	int DOT = 85;
	/** RegularExpression Id. */
	int AT = 86;
	/** RegularExpression Id. */
	int ASSIGN = 87;
	/** RegularExpression Id. */
	int GT = 88;
	/** RegularExpression Id. */
	int LT = 89;
	/** RegularExpression Id. */
	int BANG = 90;
	/** RegularExpression Id. */
	int TILDE = 91;
	/** RegularExpression Id. */
	int HOOK = 92;
	/** RegularExpression Id. */
	int COLON = 93;
	/** RegularExpression Id. */
	int EQ = 94;
	/** RegularExpression Id. */
	int LE = 95;
	/** RegularExpression Id. */
	int GE = 96;
	/** RegularExpression Id. */
	int NE = 97;
	/** RegularExpression Id. */
	int SC_OR = 98;
	/** RegularExpression Id. */
	int SC_AND = 99;
	/** RegularExpression Id. */
	int INCR = 100;
	/** RegularExpression Id. */
	int DECR = 101;
	/** RegularExpression Id. */
	int PLUS = 102;
	/** RegularExpression Id. */
	int MINUS = 103;
	/** RegularExpression Id. */
	int STAR = 104;
	/** RegularExpression Id. */
	int SLASH = 105;
	/** RegularExpression Id. */
	int BIT_AND = 106;
	/** RegularExpression Id. */
	int BIT_OR = 107;
	/** RegularExpression Id. */
	int XOR = 108;
	/** RegularExpression Id. */
	int REM = 109;
	/** RegularExpression Id. */
	int LSHIFT = 110;
	/** RegularExpression Id. */
	int PLUSASSIGN = 111;
	/** RegularExpression Id. */
	int MINUSASSIGN = 112;
	/** RegularExpression Id. */
	int STARASSIGN = 113;
	/** RegularExpression Id. */
	int SLASHASSIGN = 114;
	/** RegularExpression Id. */
	int ANDASSIGN = 115;
	/** RegularExpression Id. */
	int ORASSIGN = 116;
	/** RegularExpression Id. */
	int XORASSIGN = 117;
	/** RegularExpression Id. */
	int REMASSIGN = 118;
	/** RegularExpression Id. */
	int LSHIFTASSIGN = 119;
	/** RegularExpression Id. */
	int RSIGNEDSHIFTASSIGN = 120;
	/** RegularExpression Id. */
	int RUNSIGNEDSHIFTASSIGN = 121;
	/** RegularExpression Id. */
	int ELLIPSIS = 122;

	/** Lexical state. */
	int DEFAULT = 0;
	/** Lexical state. */
	int IN_SINGLE_LINE_COMMENT = 1;
	/** Lexical state. */
	int IN_MULTI_LINE_COMMENT = 2;

	/** Literal token values. */
	String[] tokenImage = {"<EOF>", "\" \"", "\"\\t\"", "\"\\n\"", "\"\\r\"",
			"\"\\f\"", "\"\\u001a\"", "\"/*\"", "\"//\"",
			"<SINGLE_LINE_COMMENT2>", "<END_OF_LINE_MULTI>", "\"*/\"",
			"<token of kind 12>", "\"abstract\"", "\"assert\"", "\"boolean\"",
			"\"break\"", "\"byte\"", "\"case\"", "\"catch\"", "\"char\"",
			"\"class\"", "\"const\"", "\"continue\"", "\"default\"", "\"do\"",
			"\"double\"", "\"else\"", "\"enum\"", "\"extends\"", "\"false\"",
			"\"final\"", "\"finally\"", "\"float\"", "\"for\"", "\"goto\"",
			"\"if\"", "\"implements\"", "\"import\"", "\"instanceof\"",
			"\"int\"", "\"interface\"", "\"long\"", "\"native\"", "\"new\"",
			"\"null\"", "\"package\"", "\"private\"", "\"protected\"",
			"\"public\"", "\"return\"", "\"short\"", "\"static\"",
			"\"strictfp\"", "\"super\"", "\"switch\"", "\"synchronized\"",
			"\"this\"", "\"throw\"", "\"throws\"", "\"transient\"", "\"true\"",
			"\"try\"", "\"void\"", "\"volatile\"", "\"while\"",
			"<INTEGER_LITERAL>", "<DECIMAL_LITERAL>", "<HEX_LITERAL>",
			"<OCTAL_LITERAL>", "<FLOATING_POINT_LITERAL>", "<EXPONENT>",
			"<CHARACTER_LITERAL>", "<STRING_LITERAL>", "<IDENTIFIER>",
			"<LETTER>", "<DIGIT>", "\"(\"", "\")\"", "\"{\"", "\"}\"", "\"[\"",
			"\"]\"", "\";\"", "\",\"", "\".\"", "\"@\"", "\"=\"", "\">\"",
			"\"<\"", "\"!\"", "\"~\"", "\"?\"", "\":\"", "\"==\"", "\"<=\"",
			"\">=\"", "\"!=\"", "\"||\"", "\"&&\"", "\"++\"", "\"--\"",
			"\"+\"", "\"-\"", "\"*\"", "\"/\"", "\"&\"", "\"|\"", "\"^\"",
			"\"%\"", "\"<<\"", "\"+=\"", "\"-=\"", "\"*=\"", "\"/=\"",
			"\"&=\"", "\"|=\"", "\"^=\"", "\"%=\"", "\"<<=\"", "\">>=\"",
			"\">>>=\"", "\"...\"",};

}
